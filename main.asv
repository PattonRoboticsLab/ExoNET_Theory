% main: main script to do exoNet
% patton's main program. use the other main to do carella's
% this entire directory was modified from gravityProcess_mixedDevice code

%% begin
clear; close all; clc; 
fprintf('\n ~ MAIN script:  ~ \n')
disp('choose from menu...')
fieldType=menu('Choose a field to approximate:' ...
               , 'WeightCompensation' ...
               , 'ErrorAugmentation' ...
               , 'SingleAttractor' ...
               , 'DualAttractor' ...
               , 'LimitPush' ...
               , 'EXIT');        
setUp % set most variables and plots; 

switch fieldType
  case 1 % gravity Compensation
    [TAUsDesired,PHIs,Pos]=weightEffect(Bod,Pos);       % cancelGravity
    [p,c,TAUs]=robustOpto(p0,PHIs,Bod,Pos,nTries);      % ! global optim

  case 2 % EA
    [TAUsDesired,PHIs,Pos]=eaField(Bod);                % set EA field
    [p,c,TAUs]=robustOpto(p0,PHIs,Bod,Pos,nTries);      % ! global optim
    PHIs=PHIsWorkspace; Pos=PosWorkspace;               % add fullWorkspace
    TAUs=exoNetTorques(p,PHIs);                         % field @these 
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % also plot these

  case 3
    fprintf('\n -  Single Attractor  :  - \n')
    PHIsWorkspace=PHIs;
    [TAUsDesired,PHIs,Pos]=SingleAttractor(Bod);             % torques
    plotAttractorField(PHIs,Bod,Pos,TAUsDesired,'r');        % plot desired field
    [p,c,TAUs]=robustOpto(p0,PHIs,Bod,Pos,nTries); % <-- ! global optim
    figure(3);    subplot(1,2,1);
    %plotAttractorField(PHIs,Bod,Pos,TAUs,'r');         % weight again to see it
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot solution
    %PHIs=PHIsWorkspace;                                 % PHIS of fullWorkspace
    Pos=forwardKin(PHIs,Bod);                           % positions assoc w/
    TAUs=exoNetTorques(p,PHIs);                         % torques @these points
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot these
    subplot(1,2,1); drawBody2(phiPos, Bod);            % body @1posture
    drawExonets(p,phiPose)                              % exonets as lineSegs
    suptitle('Single Attractor'); drawnow; pause(.1);   % updates display
    save SingleAttractor

  case 4
    fprintf('\n -  Dual Attractor  :  - \n')
    PHIsWorkspace=PHIs;
    [TAUsDesired,PHIs,Pos]=DualAttractor(Bod);               % torques
    plotAttractorField(PHIs,Bod,Pos,TAUsDesired,'r');        % plot desired field
    [p,c,TAUs]=robustOpto(p0,PHIs,Bod,Pos,nTries); % <-- ! global optim
    figure(4);    subplot(1,2,1);
    % plotAttractorField(PHIs,Bod,Pos,TAUs,'r');        % weight again to see it
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot solution
    % PHIs=PHIsWorkspace;                                 % PHIS of fullWorkspace
    Pos=forwardKin(PHIs,Bod);                           % positions assoc w/
    TAUs=exoNetTorques(p,PHIs);                         % torques @these points
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot these
    subplot(1,2,1); drawBody2(phiPos, Bod);            % draw body again at one posture
    drawExonets(p,phiPose)                              % exonets as lineSegs
    suptitle('Dual Attractor');
    drawnow; pause(.1);   % updates display
    save DualAttractor
    
  case 5
    fprintf('\n - Limit Push field : - \n')
    PHIsWorkspace=PHIs;
    [TAUsDesired,PHIs,Pos]=LimitPush(Bod);                   % torques
    plotAttractorField(PHIs,Bod,Pos,TAUsDesired,'r');        % plot desired field
    [p,c,TAUs]=robustOpto(p0,PHIs,Bod,Pos,nTries); % <-- ! global optim
    figure(5);    subplot(1,2,1);
    plotAttractorField(PHIs,Bod,Pos,TAUs,'r');        % weight again to see it
    plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot solution
    PHIs=PHIsWorkspace;                                 % PHIS of fullWorkspace
    Pos=forwardKin(PHIs,Bod);                           % positions assoc w/
    TAUs=exoNetTorques(p,PHIs);                         % torques @these points
    %plotVectField(PHIs,Bod,Pos,TAUs,'b');               % plot these
    subplot(1,2,1); drawBody2(phiPos, Bod);            % draw body again at one posture
    drawExonets(p,phiPose)                              % exonets as lineSegs
    suptitle('Limit Push');
    drawnow; pause(.1);   % updates display
    %save Dual Attractor

  otherwise
    disp('exiting..'); close all
    
end % END switch


fprintf(' end MAIN script. \n')
